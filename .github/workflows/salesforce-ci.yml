name: Salesforce CI/CD Practice

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: '0 0 * * 1'  # Runs weekly

jobs:
  salesforce-ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Salesforce CLI
        run: npm install -g sfdx-cli

      - name: Authenticate with Salesforce
        run: |
          echo "${{ secrets.SF_AUTH_URL }}" > sfdx_auth.txt
          sfdx force:auth:sfdxurl:store -f sfdx_auth.txt --setalias ci-scratch-org --setdefaultusername
          sfdx force:config:set instanceUrl=https://login.salesforce.com --global

      - name: Run Apex Tests (Skip if No Tests Exist)
        run: |
          if sfdx force:apex:test:list -u ci-scratch-org --json | jq -e '.result | length > 0' > /dev/null; then
            echo "Running Apex Tests..."
            sfdx force:apex:test:run -u ci-scratch-org --resultformat tap --codecoverage
          else
            echo "⚠️ No Apex test classes found, skipping tests."
          fi

  rotate-aws-keys:
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # Required for OIDC
      contents: read    # Required to read repo contents
    steps:
      - name: Configure AWS Credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: us-east-2

      - name: Invoke Lambda Function for Password Rotation
        run: |
          NEW_KEYS=$(aws lambda invoke --function-name paswordRotation --payload '{}' response.json && cat response.json)
          echo "New Access Key: $NEW_KEYS"

      - name: Update GitHub Secrets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ACCESS_KEY=$(echo $NEW_KEYS | jq -r '.AccessKeyId')
          SECRET_KEY=$(echo $NEW_KEYS | jq -r '.SecretAccessKey')
          
          curl -X PUT -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/YOUR_REPO/actions/secrets/AWS_ACCESS_KEY_ID \
            -d "{\"encrypted_value\":\"$ACCESS_KEY\"}"
          
          curl -X PUT -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/YOUR_REPO/actions/secrets/AWS_SECRET_ACCESS_KEY \
            -d "{\"encrypted_value\":\"$SECRET_KEY\"}"

  notify:
    needs: [salesforce-ci, rotate-aws-keys]
    runs-on: ubuntu-latest
    steps:
      - name: Send Email Notification
        if: always()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "${{ job.status }}: Salesforce CI/CD Workflow"
          body: "Your Salesforce CI/CD pipeline has completed with status: ${{ job.status }}. Check GitHub Actions logs for details."
          to: ggk1298@gmail.com
          from: "GitHub Actions <ggk1298@gmail.com>"

      - name: Notify Microsoft Teams
        run: |
          curl -H "Content-Type: application/json" -d '{
            "title": "GitHub Actions Notification",
            "text": "Workflow \"${{ github.workflow }}\" has completed with status: ${{ job.status }}!\nRepository: ${{ github.repository }}\nBranch: ${{ github.ref }}\nTriggered by: ${{ github.actor }}\nCommit Message: ${{ github.event.head_commit.message }}"
          }' ${{ secrets.TEAMS_WEBHOOK_URL }}

      - name: Extract Jira Issue Key from Commit Message
        id: extract_jira
        run: |
          ISSUE_KEY=$(git log -1 --pretty=%B | grep -oE '[A-Z]+-[0-9]+' || echo "NoIssue")
          echo "JIRA_ISSUE_KEY=$ISSUE_KEY" >> $GITHUB_ENV

      - name: Comment on Jira Issue
        if: env.JIRA_ISSUE_KEY != 'NoIssue'
        run: |
          curl --request POST \
          --url '${{ secrets.JIRA_URL }}/rest/api/3/issue/${{ env.JIRA_ISSUE_KEY }}/comment' \
          --header 'Authorization: Basic $(echo -n ${{ secrets.JIRA_EMAIL }}:${{ secrets.JIRA_API_TOKEN }} | base64)' \
          --header 'Content-Type: application/json' \
          --data '{
            "body": "This issue is referenced in a new commit: https://github.com/${{ github.repository }}/commit/${{ github.sha }}"
          }'
